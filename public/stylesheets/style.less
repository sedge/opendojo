/**
*                 ========================
*                 Nariyuki LESS-ification!
*                 ========================
*
* - Notice how for many classes now, whenever possible, LESS scope syntax is used to cleanly discern
* scope and namespace of child classes or elements, and respective selectors.
*
* - Parametric mixins (function-like classes) are defined to reduce repetitive code
*
* - Global variables are created for future-proofing and reuse of chosen color schemes
*
*/

// Common colors
@bodyColor: #000;
@defaultTextColor: #777;
@borderColor: #222;
@focusColor: #3399ff;

// Common settings
._background {
  background-color: @bodyColor;
}

._border(@borderColor: @borderColor) {
  border-color: @borderColor;
}

._alert(@alertColor) {
  background: @alertColor;
  color: lighten(@alertColor, 60%);
  border-color: @bodyColor;
}

html {
  height: 100%;
}

body {
  height: 100%;
  margin: 0;
  padding-top: 50px;
  background-repeat: no-repeat;
  background-attachment: fixed;
  background-image: linear-gradient(to top, lighten(#0F0F0F, 5%) 0%, @bodyColor 100%);
  color: @defaultTextColor;
}

// LESSifying these wildly nested nav classes does not work at the moment
.navbar-default .navbar-nav>.open>a, .navbar-default .navbar-nav>.open>a:focus, .navbar-default .navbar-nav>.open>a:hover {
  background-color: transparent;
  color: @focusColor;
}

.navbar-default .navbar-nav {
  >li {
    >a {
      &:focus, &:hover {
        color: #fff;
      }
    }
  }
}

.navbar {
  background: @bodyColor;
  color: @defaultTextColor;
  border: none;
  margin: 0px;
}

.dropdown-menu {
  margin-left: 45%;
  background: @bodyColor;
  color: @defaultTextColor;
  ._border;
  >li {
    >a {
      color: @defaultTextColor;
      &:focus, &:hover {
        color: #fff;
      }
    }
  }
}

.nav {
  li{
    a {
      &:focus, &:hover {
        ._background;
      }
    }
  }
}

.dropdown-submenu:hover > a {
  background-image: none;
  ._background;
}

.dropdown-menu .divider {
  background: @borderColor;
}

.btn {
  background: @borderColor;
  color: #fff;
}

.alert-success {
  ._alert(#336633);
}

.alert-warning {
  ._alert(#ff9933);
}

.alert-danger {
  background: #990000;
  color: lighten(#990000, 60%);
}

.list-group .list-group-item {
  background: @defaultTextColor;
  color: @bodyColor;
  border-color: @bodyColor;
}

.form-control {
  background: @bodyColor;
  border-color: darken(@focusColor, 40%);
  color: #fff;
}

.input-group {
  margin-bottom: 1%;
}

#top {
  font-weight: bold;
  color: @bodyColor;
}

#sub {
  color: @defaultTextColor;
}

.glyphicon {
  font-size: 16px;
}

.jumbotron {
  background: linear-gradient(to right, hsla(359,67%,32%,0) 0%,hsla(359,67%,32%,0.8) 15%,hsla(359,67%,32%,1) 19%,hsla(359,67%,32%,1) 20%,hsla(359,67%,32%,1) 50%,hsla(359,67%,32%,1) 80%,hsla(359,67%,32%,1) 81%,hsla(359,67%,32%,0.8) 85%,hsla(359,67%,32%,0) 100%);
  text-align: center;
}

.breadcrumb {
  margin: 20px;
  margin-left: 27.5%;
  width: 45%;
  text-align: center;
  background: @bodyColor;
}

.panel {
  ._background;
  ._border(#604123);
}

.table-striped {
  >tbody {
    >tr {
      &:nth-of-type(odd) {
        background-color: @borderColor;
      }
    }
  }
}

a {
  color: #00B7FF;
}

// Scope block nesting via LESS is too much for such a specific reference, yet again
.table-bordered>tbody>tr>td, .table-bordered>tbody>tr>th, .table-bordered>tfoot>tr>td, .table-bordered>tfoot>tr>th, .table-bordered>thead>tr>td, .table-bordered>thead>tr>th {
  ._border(#604123);
}
